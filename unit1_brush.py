import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import gspread
from google.oauth2.service_account import Credentials



permanent_fixed_upper = {}
permanent_fixed_lower = {}
permanent_yellow_upper = {}
permanent_yellow_lower = {}

permanent_lock_upper = set()
permanent_lock_lower = set()

permanent_fixed_upper = st.session_state.get("permanent_fixed_upper", {})
permanent_yellow_upper = st.session_state.get("permanent_yellow_upper", {})

st.set_page_config(page_title="Brush Dashboard", layout="wide")

page = st.sidebar.radio("üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤", [
    "üìä ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• rate ‡πÅ‡∏•‡∏∞ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
    "üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á‡∏ñ‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
    "üìà ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (‡πÅ‡∏¢‡∏Å Upper ‡πÅ‡∏•‡∏∞ Lower)"])


def load_config_from_sheet(sh, sheet_name):
    ws = sh.worksheet(sheet_name)
    try:
        sheet_count = int(ws.acell("B41").value)
        min_required = int(ws.acell("B42").value)
        threshold_percent = float(ws.acell("B43").value)
        alert_threshold_hours = int(ws.acell("B44").value)
        length_threshold = float(ws.acell("B45").value)
        return sheet_count, min_required, threshold_percent, alert_threshold_hours, length_threshold
    except:
        return 7, 5, 5.0, 50, 35.0



def save_config_to_sheet(sh, sheet_name, sheet_count, min_required, threshold_percent, alert_threshold_hours,length_threshold):
    try:
        ws = sh.worksheet(sheet_name)
        ws.update("B41", [[sheet_count]])
        ws.update("B42", [[min_required]])
        ws.update("B43", [[threshold_percent]])
        ws.update("B44", [[alert_threshold_hours]])
        ws.update("B45", [[length_threshold]])

    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config ‡∏•‡∏á‡∏ä‡∏µ‡∏ï‡πÑ‡∏î‡πâ: {e}")
        
@st.cache_resource(ttl=300)
def get_google_sheet():
    service_account_info = st.secrets["gcp_service_account"]
    creds = Credentials.from_service_account_info(
        service_account_info,
        scopes=["https://www.googleapis.com/auth/spreadsheets"]
    )
    gc = gspread.authorize(creds)
    return gc.open_by_url("https://docs.google.com/spreadsheets/d/1ZLpTZAqqGYQgoqvlCSg9ku4SXUtH7Fas4Z8egT4HNXY/edit?usp=sharing")

# ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ó‡∏ô gc.open_by_url()
sh = get_google_sheet()

@st.cache_data(ttl=300)
def load_excel_bytes(sheet_url):
    response = requests.get(sheet_url)
    return response.content

@st.cache_data(ttl=300)
def get_sheet_names_cached():
    return [ws.title for ws in get_google_sheet().worksheets()]


# ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå

import requests
from io import BytesIO

sheet_id = "1ZLpTZAqqGYQgoqvlCSg9ku4SXUtH7Fas4Z8egT4HNXY"
sheet_url_export = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=xlsx"


xls_bytes = load_excel_bytes(sheet_url_export)
xls = pd.ExcelFile(BytesIO(xls_bytes), engine="openpyxl")


ws_sheet1 = sh.worksheet("Sheet1")  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß


# --------------------------------------------------- PAGE 2 -------------------------------------------------


if page == "üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á‡∏ñ‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°":
    st.title("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏£‡∏á‡∏ñ‡πà‡∏≤‡∏ô + ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
    
  






    sh = get_google_sheet()

# ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Sheet (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏° pattern ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏ä‡πà‡∏ô "Sheet1", "Sheet2", ...)
    # ‚úÖ 1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö normalize (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö sheet ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πá‡∏Å/‡πÉ‡∏´‡∏ç‡πà)


    sheet_names_all = [ws.title for ws in sh.worksheets()]

    def extract_sheet_number(name):
        try:
            return int(name.lower().replace("sheet", ""))
        except:
            return float("inf")

    sheet_names = [s for s in sheet_names_all if s.lower().startswith("sheet")]
    sheet_names_sorted = sorted(sheet_names, key=extract_sheet_number)
    if "Sheet1" in sheet_names_sorted:
        sheet_names_sorted.remove("Sheet1")
        sheet_names_sorted = ["Sheet1"] + sheet_names_sorted

    sheet_names = sheet_names_sorted

    filtered_sheet_names = [s for s in sheet_names_all if s.lower().startswith("sheet") and s.lower() != "sheet1"]

    # ‚úÖ 2. ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ç‡∏≠‡∏á SheetN
    sheet_numbers = []
    for name in filtered_sheet_names:
        suffix = name.lower().replace("sheet", "")
        if suffix.isdigit():
            sheet_numbers.append(int(suffix))

    sheet_numbers.sort()
    next_sheet_number = sheet_numbers[-1] + 1 if sheet_numbers else 2
    next_sheet_name = f"Sheet{next_sheet_number}"

    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ sheet ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô
    def extract_sheet_number(name):
        try:
            return int(name.lower().replace("sheet", ""))
        except:
            return float('inf')  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

    sheet_names = [s for s in sheet_names_all if s.lower().startswith("sheet")]
    sheet_names_sorted = sorted(sheet_names, key=extract_sheet_number)

    # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ Sheet1 ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠:
    if "Sheet1" in sheet_names_sorted:
        sheet_names_sorted.remove("Sheet1")
        sheet_names_sorted = ["Sheet1"] + sheet_names_sorted

    sheet_names = sheet_names_sorted
    
    
    filtered_sheet_names = [s for s in sheet_names if s.lower() != "sheet1"]
    sheet_numbers = [
        int(s.lower().replace("sheet", "")) 
        for s in filtered_sheet_names if s.lower().replace("sheet", "").isdigit()
    ]
    sheet_numbers.sort()

    next_sheet_number = sheet_numbers[-1] + 1 if sheet_numbers else 2
    next_sheet_name = f"Sheet{next_sheet_number}"
    
    selected_sheet_auto = st.session_state.get("selected_sheet_auto", "Sheet1")
    if selected_sheet_auto not in sheet_names:
        selected_sheet_auto = sheet_names[0]  # fallback ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ sheet ‡πÉ‡∏´‡∏°‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡∏ô

    selected_sheet = st.selectbox("üìÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Sheet ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", sheet_names_sorted)

    #st.write(f"üß™ Selected (auto): {selected_sheet_auto}")
    #st.write(f"üß™ Dropdown Options: {sheet_names}")
   

        # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏ä‡πà‡∏ô Sheet13)
    
    
    next_sheet_number = sheet_numbers[-1] + 1 if sheet_numbers else 2
    next_sheet_name = f"Sheet{next_sheet_number}"

    


        # ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ä‡∏µ‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°
    filtered_sheet_names = [s for s in sheet_names if s.lower().startswith("sheet") and s.lower() != "sheet1"]
    sheet_numbers = [int(s.lower().replace("sheet", "")) for s in filtered_sheet_names if s.lower().replace("sheet", "").isdigit()]
    sheet_numbers.sort()
    next_sheet_name = f"Sheet{sheet_numbers[-1] + 1}" if sheet_numbers else "Sheet2"

    # üìå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡πÉ‡∏´‡∏°‡πà (SheetN+1)
    filtered_sheet_names = [s for s in sheet_names if s.lower() != "sheet1"]
    sheet_numbers = [int(s.lower().replace("sheet", "")) for s in filtered_sheet_names if s.lower().replace("sheet", "").isdigit()]
    sheet_numbers.sort()
    next_sheet_number = sheet_numbers[-1] + 1 if sheet_numbers else 2
    next_sheet_name = f"Sheet{next_sheet_number}"

    # üì¶ ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ï‡πÉ‡∏´‡∏°‡πà
    if st.button(f"‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà {next_sheet_name} "):
        try:
            # ‡πÉ‡∏ä‡πâ sheet ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö
            last_sheet = f"Sheet{sheet_numbers[-1]}"
            source_ws = sh.worksheet(last_sheet)
            df_prev = source_ws.get_all_values()

            # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ current
            lower_prev_left  = [[f"={last_sheet}!C{i+3}"] for i in range(24)]  # ‡∏ã‡πâ‡∏≤‡∏¢
            lower_prev_right = [[f"={last_sheet}!E{i+3}"] for i in range(24)]  # ‡∏Ç‡∏ß‡∏≤
            upper_prev_left  = [[f"={last_sheet}!H{i+3}"] for i in range(24)]
            upper_prev_right = [[f"={last_sheet}!J{i+3}"] for i in range(24)]

            

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ä‡∏µ‡∏ï‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if next_sheet_name.lower() in [ws.title.lower() for ws in sh.worksheets()]:
                st.warning(f"‚ö†Ô∏è Sheet '{next_sheet_name}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                st.stop()

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ï‡πÉ‡∏´‡∏°‡πà
            new_ws = sh.duplicate_sheet(source_sheet_id=source_ws.id, new_sheet_name=next_sheet_name)
            
            sheets = sh.worksheets()
            new_ws = sh.worksheet(next_sheet_name)
            # ‡∏¢‡πâ‡∏≤‡∏¢ sheet ‡πÑ‡∏õ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
            sheets = [ws for ws in sheets if ws.title != next_sheet_name]
            sheets.append(new_ws)
            sh.reorder_worksheets(sheets)

            
                       
                        
            # ‡∏ß‡∏≤‡∏á‡∏™‡∏π‡∏ï‡∏£ (‡∏£‡∏∞‡∏ö‡∏∏ USER_ENTERED ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏π‡∏ï‡∏£)
            new_ws.update("C3:C26", lower_prev_left, value_input_option="USER_ENTERED")
            new_ws.update("E3:E26", lower_prev_right, value_input_option="USER_ENTERED")
            new_ws.update("H3:H26", upper_prev_left, value_input_option="USER_ENTERED")
            new_ws.update("J3:J26", upper_prev_right, value_input_option="USER_ENTERED")

            
            
            try:
                new_ws.update("C3:C26", lower_prev_left, value_input_option="USER_ENTERED")
                new_ws.update("E3:E26", lower_prev_right, value_input_option="USER_ENTERED")
                new_ws.update("H3:H26", upper_prev_left, value_input_option="USER_ENTERED")
                new_ws.update("J3:J26", upper_prev_right, value_input_option="USER_ENTERED")

            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÉ‡∏™‡πà‡∏™‡∏π‡∏ï‡∏£: {e}")


            from gspread.utils import rowcol_to_a1
            
            import time

            for i in range(24):

                if i % 10 == 0:
                    time.sleep(2)



            st.session_state["selected_sheet_auto"] = next_sheet_name  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
            st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ï '{next_sheet_name}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß üéâ")
            st.rerun()
        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏à‡∏≤‡∏Å selected_sheet ‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
    ws = sh.worksheet(selected_sheet)
    df_prev = ws.get_all_values()

    def get_value(row, index):
        return row[index] if len(row) > index else ""

    rows = df_prev[2:34]  # ‡∏î‡∏∂‡∏á‡πÅ‡∏ñ‡∏ß 3 ‡∏ñ‡∏∂‡∏á 26 (index ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0)
    while len(rows) < 24:
        rows.append([""] * 10)  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 24 ‡πÅ‡∏ñ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á

    lower_current_left  = [get_value(row, 2) for row in rows]
    lower_current_right = [get_value(row, 4) for row in rows]
    upper_current_left  = [get_value(row, 7) for row in rows]
    upper_current_right = [get_value(row, 9) for row in rows]

    # ‚úÖ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    try:
        default_hours = float(ws.acell("H1").value or 0)
    except:
        default_hours = 0.0
    default_prev_date = ws.acell("A2").value or ""
    default_curr_date = ws.acell("B2").value or ""

    hours = st.number_input("‚è±Ô∏è ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", min_value=0.0, step=0.1, value=float(default_hours))
    prev_date = st.text_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", placeholder="DD/MM/YYYY", value=default_prev_date)
    curr_date = st.text_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", placeholder="DD/MM/YYYY", value=default_curr_date)

    # ‚úÖ LOWER ‡∏ã‡πâ‡∏≤‡∏¢ / ‡∏Ç‡∏ß‡∏≤
    st.markdown("### üîß ‡πÅ‡∏õ‡∏£‡∏á‡∏ñ‡πà‡∏≤‡∏ô LOWER ‡∏ã‡πâ‡∏≤‡∏¢ / ‡∏Ç‡∏ß‡∏≤")
    lower_left = []
    lower_right = []
    cols = st.columns(6)
    for i in range(24):
        col = cols[i % 6]
        with col:
            st.markdown(f"<div style='text-align: center;'>‡πÅ‡∏õ‡∏£‡∏á {i+1} ‚¨ÖÔ∏è ‡∏ã‡πâ‡∏≤‡∏¢</div>", unsafe_allow_html=True)
            default_val_l = lower_current_left[i] if i < len(lower_current_left) else ""
            val_l = st.text_input("", key=f"ll_{i}", value=default_val_l, label_visibility="collapsed")
            lower_left.append(float(val_l) if val_l else 0.0)

            st.markdown(f"<div style='text-align: center;'>‡πÅ‡∏õ‡∏£‡∏á {i+1} ‚û°Ô∏è ‡∏Ç‡∏ß‡∏≤</div>", unsafe_allow_html=True)
            default_val_r = lower_current_right[i] if i < len(lower_current_right) else ""
            val_r = st.text_input("", key=f"lr_{i}", value=default_val_r, label_visibility="collapsed")
            lower_right.append(float(val_r) if val_r else 0.0)

    # ‚úÖ UPPER ‡∏ã‡πâ‡∏≤‡∏¢ / ‡∏Ç‡∏ß‡∏≤
    st.markdown("### üîß ‡πÅ‡∏õ‡∏£‡∏á‡∏ñ‡πà‡∏≤‡∏ô UPPER ‡∏ã‡πâ‡∏≤‡∏¢ / ‡∏Ç‡∏ß‡∏≤")
    upper_left = []
    upper_right = []
    cols = st.columns(6)
    for i in range(24):
        col = cols[i % 6]
        with col:
            st.markdown(f"<div style='text-align: center;'>‡πÅ‡∏õ‡∏£‡∏á {i+1} ‚¨ÖÔ∏è ‡∏ã‡πâ‡∏≤‡∏¢</div>", unsafe_allow_html=True)
            default_val_l = upper_current_left[i] if i < len(upper_current_left) else ""
            val_l = st.text_input("", key=f"ul_{i}", value=default_val_l, label_visibility="collapsed")
            upper_left.append(float(val_l) if val_l else 0.0)

            st.markdown(f"<div style='text-align: center;'>‡πÅ‡∏õ‡∏£‡∏á {i+1} ‚û°Ô∏è ‡∏Ç‡∏ß‡∏≤</div>", unsafe_allow_html=True)
            default_val_r = upper_current_right[i] if i < len(upper_current_right) else ""
            val_r = st.text_input("", key=f"ur_{i}", value=default_val_r, label_visibility="collapsed")
            upper_right.append(float(val_r) if val_r else 0.0)
        





    # ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏ß‡∏±‡∏ô
    try:
        default_hours = float(ws.acell("H1").value or 0)
    except:
        default_hours = 0.0
    default_prev_date = ws.acell("A2").value or ""
    default_curr_date = ws.acell("B2").value or ""


    hours = st.number_input("‚è±Ô∏è ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", min_value=0.0, step=0.1, value=float(default_hours))
    
    prev_date = st.text_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤", placeholder="DD/MM/YYYY", value=default_prev_date)
    curr_date = st.text_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", placeholder="DD/MM/YYYY", value=default_curr_date)

 
    
    

    

    st.markdown("### üîß ‡πÅ‡∏õ‡∏£‡∏á‡∏ñ‡πà‡∏≤‡∏ô LOWER ‡∏ã‡πâ‡∏≤‡∏¢ / ‡∏Ç‡∏ß‡∏≤")
    lower_left = []
    lower_right = []
    cols = st.columns(6)
    for i in range(24):
        col = cols[i % 6]
        with col:
            st.markdown(f"<div style='text-align: center;'>‡πÅ‡∏õ‡∏£‡∏á {i+1} ‚¨ÖÔ∏è ‡∏ã‡πâ‡∏≤‡∏¢</div>", unsafe_allow_html=True)
            val_l = st.text_input("", key=f"ll_{i}", value="", label_visibility="collapsed")
            lower_left.append(float(val_l) if val_l else 0.0)

            st.markdown(f"<div style='text-align: center;'>‡πÅ‡∏õ‡∏£‡∏á {i+1} ‚û°Ô∏è ‡∏Ç‡∏ß‡∏≤</div>", unsafe_allow_html=True)
            val_r = st.text_input("", key=f"lr_{i}", value="", label_visibility="collapsed")
            lower_right.append(float(val_r) if val_r else 0.0)


    # ------------------ üîß UPPER ------------------
    st.markdown("### üîß ‡πÅ‡∏õ‡∏£‡∏á‡∏ñ‡πà‡∏≤‡∏ô UPPER ‡∏ã‡πâ‡∏≤‡∏¢ / ‡∏Ç‡∏ß‡∏≤")
    upper_left = []
    upper_right = []
    cols = st.columns(6)
    for i in range(24):
        col = cols[i % 6]
        with col:
            st.markdown(f"<div style='text-align: center;'>‡πÅ‡∏õ‡∏£‡∏á {i+1} ‚¨ÖÔ∏è ‡∏ã‡πâ‡∏≤‡∏¢</div>", unsafe_allow_html=True)
            val_l = st.text_input("", key=f"ul_{i}", value="", label_visibility="collapsed")
            upper_left.append(float(val_l) if val_l else 0.0)

            st.markdown(f"<div style='text-align: center;'>‡πÅ‡∏õ‡∏£‡∏á {i+1} ‚û°Ô∏è ‡∏Ç‡∏ß‡∏≤</div>", unsafe_allow_html=True)
            val_r = st.text_input("", key=f"ur_{i}", value="", label_visibility="collapsed")
            upper_right.append(float(val_r) if val_r else 0.0)
            
 





 
